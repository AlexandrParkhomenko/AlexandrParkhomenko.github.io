
-----------------------------------------------------
#include<iostream>

using namespace std;
void f() { 
   static int i; 
   
   ++i; 
   cout<<i<<" "; 
}

int main() { 
   f(); 
   f(); 
   f(); 
}

A - 1 1 1
B - 0 0 0
C - 3 2 1
D = 1 2 3
-----------------------------------------------------
#include<iostream>

using namespace std;
int main() { 
   int i = 13, j = 60;
   
   i^=j;
   j^=i;
   i^=j;
   cout<<i<<" "<<j;
}

A - 73 73
B = 60 13
C - 13 60
D - 60 60
-----------------------------------------------------
Q - How can we make an class act as an interface in C++?
<!--
Интерфейсы C ++ реализуются с использованием абстрактных классов,и эти абстрактные классы не следует путать с абстракцией данных, которая представляет собой концепцию сохранения деталей реализации отдельно от связанных данных.

Класс делается абстрактным, объявляя хотя бы одну из своих функций чистой виртуальной функцией. Чистая виртуальная функция задается путем размещения в объявлении «= 0» следующим образом:

class Box {
   public:
      // pure virtual function
      virtual double getVolume() = 0;
      
   private:
      double length;      // Length of a box
      double breadth;     // Breadth of a box
      double height;      // Height of a box
};
-->

A = By only providing all the functions as virtual functions in the class.
B - Defining the class following with the keyword virtual
C - Defining the class following with the keyword interface
D - Defining the class following with the keyword abstract
-----------------------------------------------------
#include<iostream>

using namespace std;
int main() { 
   int x = 5;

   if(x==5) {	
      if(x==5) break;
      cout<<"Hello";
   } 

   cout<<"Hi"; 
}

A = Compile error
B - Hi
C - HelloHi
D - Hello
-----------------------------------------------------
Q - What is the output of the following program?

#include<iostream>

using namespace std;
int main() {
   char *s = "C++";
   
	cout<<s<<" ";
	s++;
	cout<<s<<" ";
}

A - C++ C++
B = C++ ++
C - ++ ++
D - Compile error
-----------------------------------------------------
Q - From the below class choose the proper definition of the member function f().

template <class T>

class abc {
   void f();
};

A = template <class T>
    void abc<T>::f() { }

B - template<class T>
    void abc::f() { }

C - template<T>
    void abc<class T>::f() { }

D - template<T>
    void abc<T>::f() { }
----------------------------------------------------- 
#include <iostream>
using namespace std;
 
int main () {
   // local variable declaration:
   int x = 1;

   switch(x) {
   case 1 :
      cout << "Hi!" << endl; 
      break;
   default :
      cout << "Hello!" << endl;
   }
}

A - Hello
B = Hi
C - HelloHi
D - Compile error
-----------------------------------------------------
Q - An inline function can execute faster than a normal function.

A = True
B - False
-----------------------------------------------------
Q - What is the output of the following program?

int main() {
}

A = No output
B - Garbage
C - Compile error
D - Runtime error
-----------------------------------------------------
Q - Choose the option not applicable for the constructor.

A - Cannot be called explicitly.
B - Cannot be overloaded.
C = Cannot be overridden.
D - None of the above.
-----------------------------------------------------
Q - What is the output of the following program?

#include<iostream>

using namespace std;
int main() { 

   int i = 1, j = 2, k = 3, r; 

   r = (i, j, k);

   cout<<r<<endl;

}

A - 1
B - 2
C = 3
D - Compile Error
-----------------------------------------------------
Q - Which type of data file is analogous to an audio cassette tape?

A - Random access file
B = Sequential access file
C - Binary file
D - Source code file
-----------------------------------------------------
Q - Choose the invalid identifier from the below

A - Int
B = bool
C - DOUBLE
D - __0__
-----------------------------------------------------
Q - What is the size of the following union definition?

#include<iostream>

using namespace std;
int main() {
   union abc { 
      char a, b, c, d, e, f, g, h; 
      
      int i;
   };
   cout<<sizeof(abc)<<endl;
}

A - 1
B - 2
C = 4
D - 8
-----------------------------------------------------
Q - Runtime polymorphism is done using.

A - Function overloading
B - Virtual classes
C = Virtual functions
D - Friend function
-----------------------------------------------------
Q - A trigraph character begins with

A - #
B - ##
C = ?
D - ??
-----------------------------------------------------
Q - Choose the pure virtual function definition from the following.

A - virtual void f()=0 { }
B - void virtual f()=0 { }
C - virtual void f() {} = 0;
D = None of the above.
-----------------------------------------------------
Q - What is the full form of RTTI.

A = Runtime type identification
B - Runtime template identification
C - Robust Template Type Inheritance
D - None of the above.
-----------------------------------------------------
Q - We can have varying number of arguments for the overloaded form of () operator.

A = True
B - False
-----------------------------------------------------
